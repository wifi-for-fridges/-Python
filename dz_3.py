# ДЗ_3

"""
Реализовать функцию, принимающую два числа (позиционные аргументы) и выполняющую их деление.
Числа запрашивать у пользователя, предусмотреть обработку ситуации деления на ноль.
"""


def division(a: str, b: str) -> float:
    """
    Функция, реализующая деление 2х чисел
    :param a (str): делимое
    :param b (str): делитель
    :return (float): частное двух чисел
    """
    try:
        return float(a) / float(b)
    except ZeroDivisionError:
        print('ошибка, на 0 делить нельзя!')


value1, value2 = input('введите 2 числа через пробел: ').split()
print(division(value1, value2), '\n\n')

"""
Реализовать функцию, принимающую несколько параметров, описывающих данные пользователя: имя, фамилия,
 год рождения, город проживания, email, телефон. Функция должна принимать параметры как именованные аргументы. 
Реализовать вывод данных о пользователе одной строкой.
"""


def user_data(name: str, surname: str, year: int, city: str, email: str, phone: str) -> None:
    """
    Выводит информацию о пользователе одной строкой в столбик
    :param name (str): имя пользователя
    :param surname (str): фамилия пользователя
    :param year (int): год рождения пользователя
    :param city (str): город проживания пользователя
    :param email (str): e-mail адрес пользователя
    :param phone (str): номер телефона пользователя
    :return (None): None
    """
    print(f'информация о пользователе:\n',
          f'имя: {name}\n',
          f'фамилия: {surname}\n',
          f'год рождения: {year}\n',
          f'город проживания: {city}\n',
          f'e-mail: {email}\n',
          f'номер телефона: {phone}\n\n')


user_data(name='Вася', year=1920, email='тогда еще не было', phone='ближайший местный таксофон',
          surname='Пупкин', city='Московская дерёвня')

"""
Реализовать функцию my_func(), которая принимает три позиционных аргумента, и возвращает 
сумму наибольших двух аргументов.
"""


def my_func(arg1: float, arg2: float, arg3: float) -> float:
    """
    Функция возвращает сумму двух наибольших аргументов
    :param arg1 (float): 1е число
    :param arg2 (float): 2е число
    :param arg3 (float): 3е число
    :return (float): сумма двух наибольших чисел
    """
    tmp_list = sorted((arg1, arg2, arg3))
    return tmp_list[2] + tmp_list[1]


print(my_func(5, 4, 1))
print(my_func(10.5, 1, 0.01))
print(my_func('a', 'd', 'b'))  # решил не удалять строки, списки и кортежи
print(my_func([1], [3, 4, 5, 6], [2, 3]))
print(my_func((1, 2, 5, 7, 9, 10, 11), (3, 5, 8, 9, 15), (6, 4)))
print('\n\n')

"""
Программа принимает действительное положительное число x и целое отрицательное число y. 
Необходимо выполнить возведение числа x в степень y. Задание необходимо реализовать в виде функции 
my_func(x, y). При решении задания необходимо обойтись без встроенной функции возведения числа в степень.
"""


def deg(x: float, y: int) -> float:
    """
    Возводит число х в степень у
    :param x (float): действительное положительное число
    :param y (int): целое отрицательное число
    :return (float): результат возведения в степень
    """
    return x ** y


def deg_update(x: float, y: int) -> float:
    """
    Возводит число х в степень у
    :param x (float): действительное положительное число
    :param y (int): целое отрицательное число
    :return (float): результат возведения в степень
    """
    for _ in range(2, abs(y)):  # здесь abs(y) [не abs(y) + 1] поскольку происходит переприсваивание, т.е.,
        x *= x  # например, 2^4 = 16, будет: 2 *= 2, т.е. получим 4, в след. итерации уже 4 *= 4, т.е. 16
    return 1 / x  # в цикле будет: 2 *= 2, т.е. получим 4, в след. итерации уже 4 *= 4, т.е. 16


print(f'возведение в степень через **: {deg(10.5, -4)}')
print(f'возведение в степень через цикл: {deg_update(10.5, -4)}')
print('\n\n')

"""
Программа запрашивает у пользователя строку чисел, разделенных пробелом. При нажатии Enter должна
 выводиться сумма чисел. Пользователь может продолжить ввод чисел, разделенных пробелом и снова нажать Enter.
  Сумма вновь введенных чисел будет добавляться к уже подсчитанной сумме. Но если вместо числа вводится
   специальный символ, выполнение программы завершается. Если специальный символ введен после нескольких
    чисел, то вначале нужно добавить сумму этих чисел к полученной ранее сумме и после этого завершить
     программу
"""


def addition(values_list: list, last_result: float) -> tuple:
    """
    Функция выполняет сложение введенных пользователем чисел и проверяет условия завершения программы
    :param values_list (list): список введенных пользователем значений
    :param last_result (float): результат сложения, полученный на прошлой итерации
    :return (tuple): кортеж из 2х значений: результат сложения (float) и значение флага (bool), необходимое
     для завершения программы
    """
    total = 0

    try:
        if 'q' in values_list:
            for i in range(values_list.index('q')):
                total += float(values_list[i])

            return total, True

        for number in values_list:
            total += float(number)

        return total, False

    except ValueError:
        print('необходимо вводить числа и/или q!')
        return 0, False


result = 0
while True:
    input_numbers = input(f'введите числа через пробел, q- выход: ').split()

    tmp_result, flag = addition(input_numbers, result)
    result += tmp_result

    print(f'итоговое значение: {result}')
    if flag:
        break

print('\n\n')

"""
Реализовать функцию int_func(), принимающую слово из маленьких латинских букв и возвращающую его же, но
 с прописной первой буквой. Например, print(int_func(‘text’)) -> Text. 
 
Продолжить работу над заданием. В программу должна попадать строка из слов, разделенных пробелом. 
Каждое слово состоит из латинских букв в нижнем регистре. Сделать вывод исходной строки, но каждое слово 
должно начинаться с заглавной буквы. Необходимо использовать написанную ранее функцию int_func().

"""

import copy as cp


def int_func(word: str) -> str:
    """
    Заменяет 1ю букву в слове на заглавную
    :param word (str): слово из латинских букв
    :return (str): это же слово, но с 1ой заглавной буквой
    """
    first_letter, other_letters = word[0], word[1:]
    return ''.join((first_letter.title(), other_letters))


def upgrage_int_func(inp_str: str) -> None:
    """
    Выводит исходную строку, где каждое новое слово начинается с большой буквы
    :param inp_str (str): входная строка из латинских слов, разделенных пробелом
    :return: None
    """
    inp_str = inp_str.split()
    for word in cp.copy(inp_str):
        inp_str[inp_str.index(word)] = int_func(word)

    print(' '.join(inp_str))


string = input('введите строку из латинских символов в нижнем регистре: ')
upgrage_int_func(string)
